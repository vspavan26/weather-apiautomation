[
  {
    "line": 1,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 713010700,
              "status": "passed"
            },
            "match": {
              "location": "ScenarioHooks.beforeScenario()"
            }
          },
          {
            "result": {
              "duration": 119800,
              "status": "passed"
            },
            "match": {
              "location": "WeatherStepDef.before(Scenario)"
            }
          }
        ],
        "line": 12,
        "name": "Get state code test on weather API",
        "description": "",
        "id": "verify-weather-api;get-state-code-test-on-weather-api;;2",
        "after": [
          {
            "result": {
              "duration": 30600,
              "status": "passed"
            },
            "match": {
              "location": "ScenarioHooks.afterScenario()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 704321899,
              "status": "passed"
            },
            "line": 5,
            "name": "user provides key a0f75544b9da4790a507dfb05e174f7e lat 40.730610 lon -73.935242 as parameters",
            "match": {
              "arguments": [
                {
                  "val": "a0f75544b9da4790a507dfb05e174f7e",
                  "offset": 18
                },
                {
                  "val": "40.730610",
                  "offset": 55
                },
                {
                  "val": "-73.935242",
                  "offset": 69
                }
              ],
              "location": "WeatherStepDef.user_provides_key(String,String,String)"
            },
            "matchedColumns": [
              0,
              1,
              2
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 4229639700,
              "status": "passed"
            },
            "line": 6,
            "name": "user invokes state code service as GET",
            "match": {
              "location": "WeatherStepDef.user_invokes_state_service()"
            },
            "keyword": "When "
          },
          {
            "output": [
              "{\"data\":[{\"rh\":77,\"pod\":\"d\",\"lon\":-73.94,\"pres\":1011,\"timezone\":\"America\\/New_York\",\"ob_time\":\"2019-08-03 12:08\",\"country_code\":\"US\",\"clouds\":75,\"ts\":1564834080,\"solar_rad\":228.6,\"state_code\":\"NY\",\"city_name\":\"Long Island City\",\"wind_spd\":1.34,\"last_ob_time\":\"2019-08-03T12:08:00\",\"wind_cdir_full\":\"south-southwest\",\"wind_cdir\":\"SSW\",\"slp\":1013,\"vis\":5,\"h_angle\":-56.3,\"sunset\":\"00:09\",\"dni\":678.67,\"dewpt\":20.2,\"snow\":0,\"uv\":2.90646,\"precip\":0,\"wind_dir\":199,\"sunrise\":\"09:54\",\"ghi\":326.9,\"dhi\":78.85,\"aqi\":50,\"lat\":40.73,\"weather\":{\"icon\":\"c02d\",\"code\":\"802\",\"description\":\"Scattered clouds\"},\"datetime\":\"2019-08-03:12\",\"temp\":24.4,\"station\":\"D9152\",\"elev_angle\":22.03,\"app_temp\":25}],\"count\":1}\n"
            ],
            "result": {
              "duration": 131587000,
              "status": "passed"
            },
            "line": 7,
            "name": "verify status code is 200",
            "match": {
              "location": "WeatherStepDef.verify_status_code()"
            },
            "keyword": "Then "
          },
          {
            "output": [
              "The state code from the response is NY"
            ],
            "result": {
              "duration": 12480901,
              "status": "passed"
            },
            "line": 8,
            "name": "print the state code from response",
            "match": {
              "location": "WeatherStepDef.print_state_code()"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@Smoke"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 51901,
              "status": "passed"
            },
            "match": {
              "location": "ScenarioHooks.beforeScenario()"
            }
          },
          {
            "result": {
              "duration": 47300,
              "status": "passed"
            },
            "match": {
              "location": "WeatherStepDef.before(Scenario)"
            }
          }
        ],
        "line": 23,
        "name": "Get weather test on weather API",
        "description": "",
        "id": "verify-weather-api;get-weather-test-on-weather-api;;2",
        "after": [
          {
            "result": {
              "duration": 24101,
              "status": "passed"
            },
            "match": {
              "location": "ScenarioHooks.afterScenario()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 2388801,
              "status": "passed"
            },
            "line": 16,
            "name": "user provides key a0f75544b9da4790a507dfb05e174f7e postcode 2142 as parameters",
            "match": {
              "arguments": [
                {
                  "val": "a0f75544b9da4790a507dfb05e174f7e",
                  "offset": 18
                },
                {
                  "val": "2142",
                  "offset": 60
                }
              ],
              "location": "WeatherStepDef.user_provides_key(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1567187900,
              "status": "passed"
            },
            "line": 17,
            "name": "user invokes weather service as GET",
            "match": {
              "location": "WeatherStepDef.user_invokes_weather_service()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 23794800,
              "error_message": "java.lang.AssertionError: 1 expectation failed.\nExpected status code \u003c200\u003e doesn\u0027t match actual status code \u003c403\u003e.\n\r\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\r\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\r\n\tat org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:80)\r\n\tat org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:74)\r\n\tat org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)\r\n\tat org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallConstructor(CallSiteArray.java:60)\r\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:235)\r\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:247)\r\n\tat com.jayway.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:598)\r\n\tat com.jayway.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)\r\n\tat com.jayway.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:760)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:210)\r\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:59)\r\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:166)\r\n\tat com.jayway.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:120)\r\n\tat com.jayway.restassured.specification.ResponseSpecification$statusCode$0.callCurrent(Unknown Source)\r\n\tat com.jayway.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:128)\r\n\tat com.jayway.restassured.internal.ValidatableResponseOptionsImpl.statusCode(ValidatableResponseOptionsImpl.java:117)\r\n\tat com.api.StepDefinitions.WeatherStepDef.verify_status_code(WeatherStepDef.java:53)\r\n\tat âœ½.Then verify status code is 200(WeatherAPI.feature:18)\r\n",
              "status": "failed"
            },
            "line": 18,
            "name": "verify status code is 200",
            "match": {
              "location": "WeatherStepDef.verify_status_code()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 19,
            "name": "print the utc timestamp and weather from response",
            "match": {
              "location": "WeatherStepDef.print_weather_timestamp()"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 14,
            "name": "@Smoke"
          }
        ]
      }
    ],
    "name": "Verify weather API",
    "description": "",
    "id": "verify-weather-api",
    "keyword": "Feature",
    "uri": "WeatherAPI.feature"
  }
]